// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: echo/v1/echo_api.proto

package echov1pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo_v1_echo_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_echo_v1_echo_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_echo_v1_echo_api_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_echo_v1_echo_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_echo_v1_echo_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_echo_v1_echo_api_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_echo_v1_echo_api_proto protoreflect.FileDescriptor

var file_echo_v1_echo_api_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x76,
	0x69, 0x6e, 0x65, 0x2e, 0x68, 0x65, 0x79, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x63, 0x68, 0x6f,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x27, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x0c, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x32, 0x87, 0x02, 0x0a, 0x07, 0x45, 0x63, 0x68, 0x6f, 0x41, 0x50, 0x49, 0x12, 0x74,
	0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x26, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x76, 0x69,
	0x6e, 0x65, 0x2e, 0x68, 0x65, 0x79, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x76, 0x69, 0x6e, 0x65, 0x2e, 0x68, 0x65, 0x79, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22,
	0x10, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x26, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x76, 0x69, 0x6e, 0x65, 0x2e, 0x68,
	0x65, 0x79, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x76, 0x69, 0x6e, 0x65, 0x2e, 0x68, 0x65, 0x79, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x63, 0x68, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x42, 0xb6, 0x01, 0x0a,
	0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x76, 0x69, 0x6e, 0x65, 0x2e, 0x68,
	0x65, 0x79, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0c,
	0x45, 0x63, 0x68, 0x6f, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x76, 0x69, 0x6e, 0x65, 0x2f, 0x68, 0x65, 0x79, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x65,
	0x63, 0x68, 0x6f, 0x76, 0x31, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x47, 0x48, 0x45, 0xaa, 0x02, 0x19,
	0x47, 0x72, 0x65, 0x65, 0x6e, 0x76, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x65, 0x79, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x76, 0x69, 0x6e, 0x65, 0x5c, 0x48, 0x65, 0x79, 0x67, 0x72, 0x70, 0x63, 0x5c, 0x45, 0x63,
	0x68, 0x6f, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_echo_v1_echo_api_proto_rawDescOnce sync.Once
	file_echo_v1_echo_api_proto_rawDescData = file_echo_v1_echo_api_proto_rawDesc
)

func file_echo_v1_echo_api_proto_rawDescGZIP() []byte {
	file_echo_v1_echo_api_proto_rawDescOnce.Do(func() {
		file_echo_v1_echo_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_echo_v1_echo_api_proto_rawDescData)
	})
	return file_echo_v1_echo_api_proto_rawDescData
}

var file_echo_v1_echo_api_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_echo_v1_echo_api_proto_goTypes = []interface{}{
	(*PingRequest)(nil),  // 0: greenvine.heygrpc.echo.v1.PingRequest
	(*PingResponse)(nil), // 1: greenvine.heygrpc.echo.v1.PingResponse
}
var file_echo_v1_echo_api_proto_depIdxs = []int32{
	0, // 0: greenvine.heygrpc.echo.v1.EchoAPI.Send:input_type -> greenvine.heygrpc.echo.v1.PingRequest
	0, // 1: greenvine.heygrpc.echo.v1.EchoAPI.Subscribe:input_type -> greenvine.heygrpc.echo.v1.PingRequest
	1, // 2: greenvine.heygrpc.echo.v1.EchoAPI.Send:output_type -> greenvine.heygrpc.echo.v1.PingResponse
	1, // 3: greenvine.heygrpc.echo.v1.EchoAPI.Subscribe:output_type -> greenvine.heygrpc.echo.v1.PingResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_echo_v1_echo_api_proto_init() }
func file_echo_v1_echo_api_proto_init() {
	if File_echo_v1_echo_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_echo_v1_echo_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_echo_v1_echo_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_echo_v1_echo_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_echo_v1_echo_api_proto_goTypes,
		DependencyIndexes: file_echo_v1_echo_api_proto_depIdxs,
		MessageInfos:      file_echo_v1_echo_api_proto_msgTypes,
	}.Build()
	File_echo_v1_echo_api_proto = out.File
	file_echo_v1_echo_api_proto_rawDesc = nil
	file_echo_v1_echo_api_proto_goTypes = nil
	file_echo_v1_echo_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EchoAPIClient is the client API for EchoAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoAPIClient interface {
	// Send returns the message sent by the requester.
	Send(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Subscribe opens a stream and returns the Ping message and an Unix timestamp every second.
	Subscribe(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (EchoAPI_SubscribeClient, error)
}

type echoAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoAPIClient(cc grpc.ClientConnInterface) EchoAPIClient {
	return &echoAPIClient{cc}
}

func (c *echoAPIClient) Send(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/greenvine.heygrpc.echo.v1.EchoAPI/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoAPIClient) Subscribe(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (EchoAPI_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoAPI_serviceDesc.Streams[0], "/greenvine.heygrpc.echo.v1.EchoAPI/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoAPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EchoAPI_SubscribeClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type echoAPISubscribeClient struct {
	grpc.ClientStream
}

func (x *echoAPISubscribeClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoAPIServer is the server API for EchoAPI service.
type EchoAPIServer interface {
	// Send returns the message sent by the requester.
	Send(context.Context, *PingRequest) (*PingResponse, error)
	// Subscribe opens a stream and returns the Ping message and an Unix timestamp every second.
	Subscribe(*PingRequest, EchoAPI_SubscribeServer) error
}

// UnimplementedEchoAPIServer can be embedded to have forward compatible implementations.
type UnimplementedEchoAPIServer struct {
}

func (*UnimplementedEchoAPIServer) Send(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedEchoAPIServer) Subscribe(*PingRequest, EchoAPI_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterEchoAPIServer(s *grpc.Server, srv EchoAPIServer) {
	s.RegisterService(&_EchoAPI_serviceDesc, srv)
}

func _EchoAPI_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoAPIServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greenvine.heygrpc.echo.v1.EchoAPI/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoAPIServer).Send(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoAPI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoAPIServer).Subscribe(m, &echoAPISubscribeServer{stream})
}

type EchoAPI_SubscribeServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type echoAPISubscribeServer struct {
	grpc.ServerStream
}

func (x *echoAPISubscribeServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _EchoAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greenvine.heygrpc.echo.v1.EchoAPI",
	HandlerType: (*EchoAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _EchoAPI_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EchoAPI_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "echo/v1/echo_api.proto",
}
